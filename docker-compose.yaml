services:
  library_api:
    build:
      context: .
    env_file:
      - .env
    ports:
      - "8001:8000"
    volumes:
      - ./:/app
    command: >
      sh -c "python manage.py migrate && python manage.py loaddata books.json &&
            python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 5s
      timeout: 10s
      retries: 5

  db:
    image: postgres:16.0-alpine3.17
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - my_db:$PGDATA
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U library_api" ]
      interval: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  celery-worker:
    build:
      context: .
    container_name: celery-worker
    command: celery -A library_api worker --loglevel=INFO
    volumes:
      - .:/var/www/app/worker
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "celery -A library_api status" ]
      interval: 5s
      timeout: 10s

  celery-beat:
    build:
      context: .
    container_name: celery-beat
    command: celery -A library_api beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/var/www/app/beat
    depends_on:
      db:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "celery -A library_api status" ]
      interval: 5s
      timeout: 10s

  telegram-bot:
    build:
      context: .
    command: >
      sh -c "uvicorn telegram_bot.notify:app --host ${TELEGRAM_BOT_HOST} --port ${TELEGRAM_BOT_PORT} --reload"
    ports:
      - "${TELEGRAM_BOT_PORT}:${TELEGRAM_BOT_PORT}"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${TELEGRAM_BOT_HOST}:${TELEGRAM_BOT_PORT}"]
      interval: 5s
      timeout: 10s


volumes:
  my_db:
  my_media:
  redis_data:
